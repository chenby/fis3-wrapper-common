#!/usr/bin/env node

require( 'shelljs/global' );
var Liftoff = require( 'liftoff' );
var argv = require( 'minimist' )( process.argv.slice( 2 ) );
var path = require( 'path' );
var fis3bcli = require( '../lib/fis3bcli' );

global.fis3argv = argv;

var cli = new Liftoff( {
    name: 'fis3b',
    processTitle: 'fis',
    moduleName: 'fis3b',
    configName: 'fis-conf',

    // only js supported!
    extensions: {
        '.js': null
    }
} );

cli.launch( {
    cwd: argv.r || argv.root,
    configPath: argv.f || argv.file
}, function( env ) {

    var fis;
    if ( !env.modulePath ) {
        fis = require( '../' );
    } else {
        fis = require( env.modulePath );
    }
    fis.set( 'system.localNPMFolder',
        path.join( env.cwd, 'node_modules/fis3-wrapper-common' ) );
    fis.set( 'system.globalNPMFolder', path.dirname( __dirname ) );
    fis.cli.name = this.name;

    if ( fis3bcli( argv, fis ) ) return;

    var isRelease = checkIsRelease( argv );

    if ( isRelease ) {
        // 提前读取配置文件
        require( env.configPath );
        // console.log( fis.config.get( 'project.dependencies' ) );

        var dependencies = fis.config.get( 'project.dependencies' );

        require( '../lib/beforebuild' )( dependencies, env );
    }

    // 调用常规API
    fis.cli.run( argv, env );

    if ( isRelease ) {
        var isWatching = argv.w || argv.watch;

        // 非watch的build需要立即调用清理
        if ( !isWatching )
            return require( '../lib/afterbuild' )( dependencies, env );

        process.stdin.resume();
        if ( onter.hooked ) return;

        process.on( 'SIGINT', onter.bind(
            { dependencies: dependencies, env: env }
        ) );

        // win32 works on cmd window, but not git bash! : (
        //if ( process.platform == 'win32' ) {
        //    var rl = require( 'readline' ).createInterface( {
        //        input: process.stdin,
        //        output: process.stdout
        //    } );
        //
        //    rl.on( 'SIGINT', function() {
        //        process.emit( 'SIGINT' );
        //    } );
        //}

        // Windows doesn't use POSIX signals
        if ( process.platform === 'win32' ) {
            const keypress = require( 'keypress' );
            keypress( process.stdin );
            process.stdin.resume();
            // 可能会报错，加入容错处理
            process.stdin.setRawMode && process.stdin.setRawMode( true );
            process.stdin.setEncoding( 'utf8' );
            process.stdin.on( 'keypress', function( char, key ) {
                if ( key && key.ctrl && key.name == 'c' ) {
                    // Behave like a SIGUSR2
                    // process.emit( 'SIGUSR2' );
                    process.emit( 'SIGINT' );
                } else if ( key && key.ctrl && key.name == 'r' ) {
                    // Behave like a SIGHUP
                    process.emit( 'SIGHUP' );
                }
            } );
        }

        // TODO
        // 上述两个方法在win32平台下，只对原生cmd窗口生效
        // git bash下的stdin会被提前捕获导致不生效

    }

} );

/**
 * 检查是不是在执行release命令
 * @param argv
 */
function checkIsRelease( argv ) {
    return ( ~ argv[ '_' ].indexOf( 'release' ) ) && !argv.help;
}

/**
 * 简易单例
 * @type {{hooked, bind}}
 */
var onter = function () {

    var instance;

    return {
        hooked: false,
        bind: function ( context ) {
            !instance && (
                instance = ter.bind( context ),
                onter.hooked = true
            );
            return instance;
        }
    };

}();

function ter () {
    require( '../lib/afterbuild' )( this.dependencies, this.env );
    console.log( '\nProcess:' + process.pid + ' Will Exit.' );
    process.nextTick( function () {
        process.exit( 0 );
    } );
}